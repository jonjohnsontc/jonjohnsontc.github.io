{"version":3,"file":"component---src-templates-blog-template-js-6a72a7ebd15c3d009d1e.js","mappings":"2JAKMA,EAAM,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QAChCC,GAAaC,EAAAA,EAAAA,eAAbD,SAGR,GAFiBE,EAAAA,EAAAA,IAAeC,GAAxBC,KAOCC,aAJPC,EADF,EACEA,aACAC,EAFF,EAEEA,mBACAC,EAHF,EAGEA,QACAC,EAJF,EAIEA,aAGIC,EAAM,CACVd,MAAOA,GAASU,EAChBT,YAAaA,GAAeU,EAC5BT,MAAM,GAAIU,GAAUV,GAASW,GAC7BE,IAAI,GAAIH,EAAUR,GAGpB,OACE,gBAAC,IAAD,CAAQJ,MAAOc,EAAId,OACjB,wBAAMgB,KAAK,cAAcC,QAASH,EAAIb,cACtC,wBAAMe,KAAK,QAAQC,QAASH,EAAIZ,QAC/BY,EAAIC,KAAO,wBAAMG,SAAS,SAASD,QAASH,EAAIC,OAC/CZ,EAAiB,KAAS,wBAAMe,SAAS,UAAUD,QAAQ,YAC5DH,EAAId,OAAS,wBAAMkB,SAAS,WAAWD,QAASH,EAAId,QACpDc,EAAIb,aACH,wBAAMiB,SAAS,iBAAiBD,QAASH,EAAIb,cAE9Ca,EAAIZ,OAAS,wBAAMgB,SAAS,WAAWD,QAASH,EAAIZ,UAK3D,MAEAH,EAAIoB,aAAe,CACjBnB,MAAO,KACPC,YAAa,KACbC,MAAO,KACPC,SAAS,GAGX,IAAMI,EAAK,c,yFC3CI,SAASa,EAAT,GAA6B,IAClCC,EADiC,EAARC,KACzBD,eACAE,EAAsBF,EAAtBE,YAAaC,EAASH,EAATG,KAErB,OACE,uBAAKC,UAAS,iCACZ,gBAAC,IAAD,CAAKzB,MAAUuB,EAAYvB,MAAjB,aAAoCG,SAAS,IACvD,uBAAKsB,UAAS,uDAGZ,uBAAKA,UAAS,cACd,uBAAKA,UAAS,aACZ,qBACEA,UAAS,iEAERF,EAAYvB,SAKnB,wBAAMyB,UAAS,aAAf,iBAA6CF,EAAYG,MACzD,uBACED,UAAS,yBACTE,wBAAyB,CAAEC,OAAQJ,KAErC,0BACEC,UAAU,2CACVI,SACE,wBAAMJ,UAAU,qBAAhB","sources":["webpack://jjs-website/./src/components/seo.js","webpack://jjs-website/./src/templates/blogTemplate.js"],"sourcesContent":["import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useLocation } from \"@reach/router\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\nconst SEO = ({ title, description, image, article }) => {\n  const { pathname } = useLocation();\n  const { site } = useStaticQuery(query);\n\n  const {\n    defaultTitle,\n    defaultDescription,\n    siteUrl,\n    defaultImage,\n  } = site.siteMetadata;\n\n  const seo = {\n    title: title || defaultTitle,\n    description: description || defaultDescription,\n    image: `${siteUrl}${image || defaultImage}`,\n    url: `${siteUrl}${pathname}`,\n  };\n\n  return (\n    <Helmet title={seo.title}>\n      <meta name=\"description\" content={seo.description} />\n      <meta name=\"image\" content={seo.image} />\n      {seo.url && <meta property=\"og:url\" content={seo.url} />}\n      {(article ? true : null) && <meta property=\"og:type\" content=\"article\" />}\n      {seo.title && <meta property=\"og:title\" content={seo.title} />}\n      {seo.description && (\n        <meta property=\"og:description\" content={seo.description} />\n      )}\n      {seo.image && <meta property=\"og:image\" content={seo.image} />}\n    </Helmet>\n  );\n};\n\nexport default SEO;\n\nSEO.defaultProps = {\n  title: null,\n  description: null,\n  image: null,\n  article: false,\n};\n\nconst query = graphql`\n  query SEO {\n    site {\n      siteMetadata {\n        defaultTitle: title\n        defaultDescription: description\n        siteUrl: url\n        defaultImage: image\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport SEO from \"../components/seo\";\n\nexport default function Template({ data }) {\n  const { markdownRemark } = data;\n  const { frontmatter, html } = markdownRemark;\n\n  return (\n    <div className={`blog-post-container container`}>\n      <SEO title={`${frontmatter.title} | JonJ.io`} article={true} />\n      <div className={`blog-post hero is-medium has-background-grey-darker`}>\n        {/* We render a blank hero-body, and hero-foot with text to \n        give the title at bottom look */}\n        <div className={`hero-body`}></div>\n        <div className={`hero-foot`}>\n          <p\n            className={`title is-size-1 is-inline has-text-white is-family-sans-serif`}\n          >\n            {frontmatter.title}\n          </p>\n        </div>\n      </div>\n\n      <span className={`blog-date`}>Published on: {frontmatter.date}</span>\n      <div\n        className={`blog-post-content mt-3`}\n        dangerouslySetInnerHTML={{ __html: html }}\n      />\n      <footer\n        className=\"footer is-flex is-justify-content-center\"\n        children={\n          <span className=\"has-text-centered\">\n            ~ Thanks for reading! If you enjoyed it, consider sharing it with\n            someone u like ðŸ’œ ~\n          </span>\n        }\n      />\n    </div>\n  );\n}\nexport const pageQuery = graphql`\n  query($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        slug\n        title\n      }\n    }\n  }\n`;\n"],"names":["SEO","title","description","image","article","pathname","useLocation","useStaticQuery","query","site","siteMetadata","defaultTitle","defaultDescription","siteUrl","defaultImage","seo","url","name","content","property","defaultProps","Template","markdownRemark","data","frontmatter","html","className","date","dangerouslySetInnerHTML","__html","children"],"sourceRoot":""}