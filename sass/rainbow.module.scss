// For the rainbow effect in the blog post, "I Bought a Gay TLD!"
// Originally scoped from https://csee.bangor.ac.uk/project-rainbow/pure-css-rainbows/
@use "sass:math";
// @use "mystyles/white-ter";

$rainbow-diameter: 800px;
$rainbow-thickness: 200px;
$animation-duration: 6s;
$background-colour: #fbf1c7;
$rainbow-filter: hue-rotate(-15deg) contrast(95%);
$rainbow-opacity: 1;
$rainbow-colours: #ff0000,
  // red
  #ff7f00,
  // orange
  #ffff00,
  // yellow
  #00ff00,
  // green
  #0000ff,
  // blue
  #4b0082,
  // indigo
  #9400d3; // violet

// Leave these alone
$rainbow-radius: math.div($rainbow-diameter, 2);
$colour-band-width: math.div($rainbow-thickness, length($rainbow-colours));

@mixin rainbowGradient($type) {
  // Base gradient
  $rainbow-gradient: circle at center, transparent,
    transparent $rainbow-radius - $rainbow-thickness,
    nth($rainbow-colours, -1) $rainbow-radius - $rainbow-thickness;

  // Generate banded or smooth radial gradient
  @for $i from 1 through length($rainbow-colours) {
    $colour: nth($rainbow-colours, -$i);

    $rainbow-gradient: append(
      $rainbow-gradient,
      $colour
        $rainbow-radius -
        (
          $rainbow-thickness -
            if(
              $type == "smooth",
              $colour-band-width +
                math.div($colour-band-width, (length($rainbow-colours))),
              $colour-band-width
            ) *
            ($i - 1)
        )
    );

    @if($type == "bands") {
        $rainbow-gradient: append(
          $rainbow-gradient,
          $colour $rainbow-radius - ($rainbow-thickness - $colour-band-width * $i)
        );
      }
  }
  background: radial-gradient($rainbow-gradient);
}

@mixin rainbow($type) {
  &::before {
    content: '';
    position: absolute;
    width: $rainbow-diameter;
    height: $rainbow-diameter;
    filter: $rainbow-filter;
    opacity: $rainbow-opacity;
    border-radius: 50%;
    @include rainbowGradient($type);
  }
}

// Rainbow container
.rainbow {
  width: $rainbow-diameter;
  height: $rainbow-radius;
  margin: 0px;
  position: relative;
  overflow: hidden;
  @include rainbow("smooth");

  // Rainbow classes
  &.bands { @include rainbow("bands"); }
  &.smooth { @include rainbow("smooth"); }
  
  // Animation element
  &::after {
    content: '';
    position: absolute;
    transform-origin: $rainbow-radius $rainbow-radius;
    width: $rainbow-diameter;
    height: $rainbow-radius;
    background-color: $background-colour;
    animation: wipe $animation-duration ease-in-out infinite;
  }
}

// Wipe animation
@keyframes wipe {
  0% { transform: rotate(0deg); }
  20% { transform: rotate(180deg); }
  70% { transform: rotate(180deg); }
  90% { transform: rotate(360deg); }
  100% { transform: rotate(360deg); }
}
