@charset "utf-8";
@use "sass:math";
@import url("https://fonts.googleapis.com/css2?family=Ubuntu+Mono&display=swap");
@import url("https://fonts.googleapis.com/css2?family=Noto+Sans:wght@700&display=swap");

// I've been unable to define font family in a more
// local scope and get it to load on the website
// Fonts
$family-primary: "Ubuntu Mono", monospace;
$family-secondary: "Ubuntu Mono", monospace;
$family-sans-serif: "Noto Sans", BlinkMacSystemFont, -apple-system, "Segoe UI",
  "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans",
  "Helvetica Neue", "Helvetica", "Arial", sans-serif;
$body-size: 18px;

$rainbow-diameter: 800px;
$rainbow-thickness: 200px;
$animation-duration: 4.5s;
$rainbow-filter: hue-rotate(-15deg) contrast(95%);
$rainbow-opacity: 1;
$rainbow-colours: #ff0000,
  // red
  #ff7f00,
  // orange
  #ffff00,
  // yellow
  #00ff00,
  // green
  #0000ff,
  // blue
  #4b0082,
  // indigo
  #9400d3; // violet;

// Leave these alone
$rainbow-radius: math.div($rainbow-diameter, 2);
$colour-band-width: math.div($rainbow-thickness, length($rainbow-colours));

@mixin rainbow($type) {
  &::before {
    content: "";
    position: absolute;
    width: $rainbow-diameter;
    height: $rainbow-diameter;
    filter: $rainbow-filter;
    opacity: $rainbow-opacity;
    border-radius: 50%;
    @include rainbowGradient($type);
  }
}

.gatsby-highlight-code-line {
  background-color: #feb;
  display: block;
  margin-right: -1em;
  margin-left: -1em;
  padding-right: 1em;
  padding-left: 0.75em;
  border-left: 0.25em solid #f99;
}

// Wipe animation
@keyframes wipe {
  0% {
    transform: rotate(0deg);
  }
  20% {
    transform: rotate(180deg);
  }
  70% {
    transform: rotate(180deg);
  }
  90% {
    transform: rotate(360deg);
  }
  100% {
    transform: rotate(360deg);
  }
}
/*


THEME 1 - GRUVBOX


*/
body {
  // Global vars
  // Bulma colors
  $white-ter: #fbf1c7;
  $white: #f9f5d7;
  $turquoise: #458588;
  $green: #98971a;
  $grey-darker: #504945;
  $cyan: #076678;
  $yellow: #d79921;
  $purple: #b16286;
  $red: #cc241d;
  $grey-dark: hsl(0, 0%, 29%);
  $primary: $purple;
  $navbar-background-color: $white-ter;

  $container-max-width: 1000px;
  $link: #d3869b;
  $link-hover: $red;
  $link-active: $red;
  $button-background-color: $link;
  $footer-background-color: $white-ter;
  $navbar-item-color: $link;
  $navbar-item-hover-background-color: $white-ter;

  @mixin rainbowGradient($type) {
    // Base gradient
    $rainbow-gradient: circle at center, transparent,
      transparent $rainbow-radius - $rainbow-thickness,
      nth($rainbow-colours, -1) $rainbow-radius - $rainbow-thickness;

    // Generate banded or smooth radial gradient
    @for $i from 1 through length($rainbow-colours) {
      $colour: nth($rainbow-colours, -$i);

      $rainbow-gradient: append(
        $rainbow-gradient,
        $colour
          $rainbow-radius -
          (
            $rainbow-thickness -
              if(
                $type == "smooth",
                $colour-band-width +
                  math.div($colour-band-width, (length($rainbow-colours))),
                $colour-band-width
              ) *
              ($i - 1)
          )
      );

      @if ($type == "bands") {
        $rainbow-gradient: append(
          $rainbow-gradient,
          $colour
            $rainbow-radius -
            ($rainbow-thickness - $colour-band-width * $i)
        );
      }
    }
    background: radial-gradient($rainbow-gradient);
  }

  @mixin rainbow($type) {
    &::before {
      content: "";
      position: absolute;
      width: $rainbow-diameter;
      height: $rainbow-diameter;
      filter: $rainbow-filter;
      opacity: $rainbow-opacity;
      border-radius: 50%;
      @include rainbowGradient($type);
    }
  }

  .rainbow {
    width: $rainbow-diameter;
    height: $rainbow-radius;
    margin: 0px;
    position: relative;
    overflow: hidden;
    @include rainbow("smooth");

    // Rainbow classes
    &.bands {
      @include rainbow("bands");
    }
    &.smooth {
      @include rainbow("smooth");
    }

    // Animation element
    &::after {
      content: "";
      position: absolute;
      transform-origin: $rainbow-radius $rainbow-radius;
      width: $rainbow-diameter;
      height: $rainbow-radius;
      background-color: $white-ter;
      animation: wipe $animation-duration ease-in-out infinite;
    }
  }

  @media (prefers-reduced-motion) {
    .rainbow {
      &::after {
        animation: none;
        background-color: transparent;
      }
    }
  }
  .app {
    background-color: $white-ter;
    width: 100vw;
    min-height: 100vh;
    overflow-y: auto;
  }

  .nav-active-link {
    text-underline-offset: 0.3em;
    text-decoration: underline 3px;
    color: $red;
  }

  .nav-button {
    color: $primary;
    &:hover {
      color: $red;
    }
  }

  // Why is this an `ally` class?
  .nav-ally {
    background-color: transparent;
    border: none;
    cursor: pointer;
  }

  .bi {
    position: relative;
    top: 5px;
  }

  #jj {
    display: inline-block;
    background-color: $white;
    border-radius: 50%;
    border: none;
  }

  .logo {
    position: relative;
    top: 15px;
  }

  .sad-face {
    font-size: 10rem;
  }

  //////////////////////////
  // About page elements //
  /////////////////////////

  .jj-pic {
    border-radius: 50%;
    height: 400px;
  }

  .headline {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
  }

  .bio {
    font-size: 1.25rem;
  }

  //////////////////////////
  // blog page elements //
  /////////////////////////

  .anchor {
    &:hover {
      &::after {
        content: "#";
        margin-left: 20px;
      }
    }
  }
  .blog {
    border-bottom: 1px solid $grey-darker;
  }

  .blog-list-box {
    border-top: 1px solid $grey-darker;
  }

  .blog-date {
    font-style: italic;
    padding-bottom: 2rem;
  }

  .blog-post-content {
    font-size: 1.25rem;
  }

  .blog-title {
    font-size: 2rem;
    color: #4a4a4a;
  }

  //////////////////////////
  // stuff page elements //
  /////////////////////////

  .stuff-button {
    background-color: transparent;
    border: none;
    cursor: pointer;
    &:disabled {
      opacity: 50%;
    }
    // This class is applied to make the stuff buttons
    // stay in place in normal view
    &.stuff-reg {
      position: absolute;
      top: 55%;
    }
  }
  .dot {
    border: none;
    opacity: 50%;
    cursor: pointer;
    background-color: transparent;
    &.dot-background {
      background-color: $grey-darker;
      border-radius: 50%;
      height: 50px;
      width: 50px;
    }
    &:disabled {
      opacity: 100%;
    }
  }

  .stuff-image {
    border-bottom: 3px dotted $grey-darker;
  }
  @import "./bulma/bulma.sass";
}
/*


THEME 2 - BOOBERRY


*/
body.booberry {
  /* Color Theme Swatches in Hex */
  // Initially derived from an adobe color extraction
  // against a screenshot of the GitHub light vscode theme
  // https://color.adobe.com/myBFA017themes
  $color-theme_booberry-1-hex: #f2275d;
  $color-theme_booberry-2-hex: #7139bf;
  $color-theme_booberry-3-hex: #0468bf;
  $color-theme_booberry-4-hex: #888c03;
  $color-theme_booberry-5-hex: #f2f2f2;
  $color-theme_booberry-6-hex: #f78a4c;
  $color-theme_booberry-7-hex: #5ea4bc;

  $white-ter: $color-theme_booberry-5-hex;
  $white: hsl(0, 0%, 100%);
  $turquoise: $color-theme_booberry-7-hex;
  $green: $color-theme_booberry-4-hex;
  $grey-darker: $color-theme_booberry-2-hex;
  $cyan: $color-theme_booberry-3-hex;
  $yellow: #d79921;
  $purple: $color-theme_booberry-2-hex;
  $red: $color-theme_booberry-1-hex;
  $grey-dark: hsl(0, 0%, 29%);
  $primary: $purple;
  $navbar-background-color: $white-ter;

  $container-max-width: 1000px;
  $link: $purple;
  $link-active: $turquoise;
  $button-background-color: $purple;
  $navbar-item-color: $purple;
  $navbar-item-hover-color: $red;
  $navbar-dropdown-item-hover-color: $red;
  $navbar-item-hover-background-color: $white-ter;

  @mixin rainbowGradient($type) {
    // Base gradient
    $rainbow-gradient: circle at center, transparent,
      transparent $rainbow-radius - $rainbow-thickness,
      nth($rainbow-colours, -1) $rainbow-radius - $rainbow-thickness;

    // Generate banded or smooth radial gradient
    @for $i from 1 through length($rainbow-colours) {
      $colour: nth($rainbow-colours, -$i);

      $rainbow-gradient: append(
        $rainbow-gradient,
        $colour
          $rainbow-radius -
          (
            $rainbow-thickness -
              if(
                $type == "smooth",
                $colour-band-width +
                  math.div($colour-band-width, (length($rainbow-colours))),
                $colour-band-width
              ) *
              ($i - 1)
          )
      );

      @if ($type == "bands") {
        $rainbow-gradient: append(
          $rainbow-gradient,
          $colour
            $rainbow-radius -
            ($rainbow-thickness - $colour-band-width * $i)
        );
      }
    }
    background: radial-gradient($rainbow-gradient);
  }

  @mixin rainbow($type) {
    &::before {
      content: "";
      position: absolute;
      width: $rainbow-diameter;
      height: $rainbow-diameter;
      filter: $rainbow-filter;
      opacity: $rainbow-opacity;
      border-radius: 50%;
      @include rainbowGradient($type);
    }
  }

  .rainbow {
    width: $rainbow-diameter;
    height: $rainbow-radius;
    margin: 0px;
    position: relative;
    overflow: hidden;
    @include rainbow("smooth");

    // Rainbow classes
    &.bands {
      @include rainbow("bands");
    }
    &.smooth {
      @include rainbow("smooth");
    }

    // Animation element
    &::after {
      position: absolute;
      transform-origin: $rainbow-radius $rainbow-radius;
      width: $rainbow-diameter;
      height: $rainbow-radius;
      background-color: $white-ter;
      animation: wipe $animation-duration ease-in-out infinite;
    }
  }

  @media (prefers-reduced-motion) {
    .rainbow {
      &::after {
        animation: none;
        background-color: transparent;
      }
    }
  }

  hr {
    background-color: $white-ter;
  }

  code {
    background-color: transparent;
    color: $red;
  }

  #jj {
    display: inline-block;
    background-color: $white;
    border-radius: 50%;
    border: none;
  }

  .app {
    background-color: $white-ter;
    width: 100vw;
    min-height: 100vh;
    overflow-y: auto;
  }

  .nav-active-link {
    text-underline-offset: 0.3em;
    text-decoration: underline 3px;
    color: $red !important;
  }

  .nav-button {
    color: $primary;
    &:hover {
      color: $red;
    }
  }

  .navbar-item > a {
    color: $purple;
    &:hover {
      color: $red;
    }
  }

  .navbar-dropdown > .navbar-item > a {
    color: $purple;
  }

  @media (max-width: 800px) {
    .navbar-dropdown > .navbar-item > a {
      color: $white;
    }
  }

  .footer {
    background-color: $white-ter;
  }

  @import "./bulma/sass/helpers/color.sass";
  @import "./bulma/sass/utilities/initial-variables.sass";
  @import "./bulma/sass/utilities/derived-variables.sass";
  @import "./bulma/sass/components/navbar.sass";
}

@import "./bulma/sass/utilities/initial-variables.sass";
@import "./bulma/sass/helpers/typography.sass";
@import "./bulma/sass/base/_all";
